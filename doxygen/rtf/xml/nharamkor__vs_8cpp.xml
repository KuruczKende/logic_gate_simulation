<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="nharamkor__vs_8cpp" kind="file" language="C++">
    <compoundname>nharamkor_vs.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes refid="comp__module_8h" local="yes">comp_module.h</includes>
    <includes refid="text__module_8h" local="yes">text_module.h</includes>
    <includes refid="karakter__keszlet_8h" local="yes">karakter_keszlet.h</includes>
    <incdepgraph>
      <node id="4">
        <label>comp_module.h</label>
        <link refid="comp__module_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>karakter_keszlet.h</label>
        <link refid="karakter__keszlet_8h"/>
      </node>
      <node id="9">
        <label>memtrace.h</label>
        <link refid="memtrace_8h"/>
      </node>
      <node id="6">
        <label>module.h</label>
        <link refid="module_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>nharamkor_vs.cpp</label>
        <link refid="nharamkor__vs_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ossz.h</label>
        <link refid="ossz_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>prot_modules.h</label>
        <link refid="prot__modules_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>shell_module.h</label>
        <link refid="shell__module_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>text_module.h</label>
        <link refid="text__module_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cstring</label>
      </node>
      <node id="3">
        <label>fstream</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="nharamkor__vs_8cpp_1ac668e8600ca0b3a3afa71eccef9ce070" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">bool</ref></type>
        <definition>bool ismod</definition>
        <argsstring>(char c)</argsstring>
        <name>ismod</name>
        <param>
          <type><ref refid="classlista" kindref="compound">char</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the character is a special symbol.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the character to be checked</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the character is &apos;&apos;, &apos;-&apos;, &apos;+&apos;, or &apos;!&apos;, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="17" column="6" bodyfile="nharamkor_vs.cpp" bodystart="17" bodyend="26"/>
        <referencedby refid="nharamkor__vs_8cpp_1a89f3b5151cdc6346dcca285bca7084a6" compoundref="nharamkor__vs_8cpp" startline="248" endline="269">instruct_handler_char_handler</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1afbce817d76bf9bc1a433c1d83fc15d0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">void</ref></type>
        <definition>void modulator</definition>
        <argsstring>(uint8_t c, uint8_t &amp;mods)</argsstring>
        <name>modulator</name>
        <param>
          <type><ref refid="classlista" kindref="compound">uint8_t</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">uint8_t</ref> &amp;</type>
          <declname>mods</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies the given mods variable based on the input character.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the character input to determine the modification </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mods</parametername>
</parameternamelist>
<parameterdescription>
<para>the variable to be modified based on the input character </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="33" column="6" bodyfile="nharamkor_vs.cpp" bodystart="33" bodyend="48"/>
        <referencedby refid="nharamkor__vs_8cpp_1a89f3b5151cdc6346dcca285bca7084a6" compoundref="nharamkor__vs_8cpp" startline="248" endline="269">instruct_handler_char_handler</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1a8394f5d2589de5e083e551414e4d1a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">uint8_t</ref></type>
        <definition>uint8_t ujmnev_ell</definition>
        <argsstring>(const char *nev, lista&lt; prot_module_t * &gt; &amp;modules)</argsstring>
        <name>ujmnev_ell</name>
        <param>
          <type><ref refid="classlista" kindref="compound">const</ref> <ref refid="classlista" kindref="compound">char</ref> *</type>
          <declname>nev</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">lista</ref>&lt; <ref refid="classprot__module__t" kindref="compound">prot_module_t</ref> * &gt; &amp;</type>
          <declname>modules</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the given name meets certain criteria and is not already in use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nev</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to be checked </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modules</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of modules to compare the name against</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the name is valid and not in use, 1 if the name not starts with &apos;_&apos;, 2 if the name contains invalid characters, 3 if the name is already in use </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="57" column="9" bodyfile="nharamkor_vs.cpp" bodystart="57" bodyend="64"/>
        <references refid="karakter__keszlet_8h_1adcfa746252c8707e3eacd9c7d865c0a0" compoundref="karakter__keszlet_8h" startline="3" endline="260">kk</references>
        <references refid="classlista_1a5baaf78ac201a75e49f18110daed7fd6" compoundref="lista_8cpp" startline="62" endline="66">lista&lt; T &gt;::length</references>
        <referencedby refid="nharamkor__vs_8cpp_1a079960085332785c1fb971533a9912a9" compoundref="nharamkor__vs_8cpp" startline="206" endline="235">test_module</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1adce48f6d81618ca9096f5b88a6e333ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">uint8_t</ref></type>
        <definition>uint8_t kisbetujo</definition>
        <argsstring>(const char *str)</argsstring>
        <name>kisbetujo</name>
        <param>
          <type><ref refid="classlista" kindref="compound">const</ref> <ref refid="classlista" kindref="compound">char</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if the input string contains at least one of each lowercase letter up to the &quot;biggest&quot; letter in use. And not contains syntactic error.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the input string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>2 if wrong format, 1 if wrong character usage, 0 if it&apos;s valid </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="73" column="9" bodyfile="nharamkor_vs.cpp" bodystart="73" bodyend="107"/>
        <referencedby refid="nharamkor__vs_8cpp_1a079960085332785c1fb971533a9912a9" compoundref="nharamkor__vs_8cpp" startline="206" endline="235">test_module</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1afb58d022f3fcaf90e41950da473cca92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">uint8_t</ref></type>
        <definition>uint8_t kisbetujo2</definition>
        <argsstring>(const char *str)</argsstring>
        <name>kisbetujo2</name>
        <param>
          <type><ref refid="classlista" kindref="compound">const</ref> <ref refid="classlista" kindref="compound">char</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if the input string contains at least one of each lowercase letter up to the &quot;biggest&quot; letter in use and after a specific character every letter used as output.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the input string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if a letter used as an output more than once, 2 if it&apos;s not valid, 0 if it&apos;s valid </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="115" column="9" bodyfile="nharamkor_vs.cpp" bodystart="115" bodyend="134"/>
        <referencedby refid="nharamkor__vs_8cpp_1a079960085332785c1fb971533a9912a9" compoundref="nharamkor__vs_8cpp" startline="206" endline="235">test_module</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1a7f4e4e25704216d56a1bbe815546d655" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">uint8_t</ref></type>
        <definition>uint8_t nagybetujo</definition>
        <argsstring>(const char *str)</argsstring>
        <name>nagybetujo</name>
        <param>
          <type><ref refid="classlista" kindref="compound">const</ref> <ref refid="classlista" kindref="compound">char</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A function that checks the wiring connections of uppercase letters in the input string.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the input string to be checked</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the wiring connections are correct, 1 if a letter used as an output more than once, 2 if there are incorrect wiring connections </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="143" column="9" bodyfile="nharamkor_vs.cpp" bodystart="143" bodyend="165"/>
        <referencedby refid="nharamkor__vs_8cpp_1a079960085332785c1fb971533a9912a9" compoundref="nharamkor__vs_8cpp" startline="206" endline="235">test_module</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1a079dcfedb64af966eab0a78d9a4c979d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">uint8_t</ref></type>
        <definition>uint8_t modulesteszt</definition>
        <argsstring>(const char *str, lista&lt; prot_module_t * &gt; &amp;modules)</argsstring>
        <name>modulesteszt</name>
        <param>
          <type><ref refid="classlista" kindref="compound">const</ref> <ref refid="classlista" kindref="compound">char</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">lista</ref>&lt; <ref refid="classprot__module__t" kindref="compound">prot_module_t</ref> * &gt; &amp;</type>
          <declname>modules</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to check and validate modules based on input string.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The input string to check against modules. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modules</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of modules to compare against the input string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, 1 if module does not exist, 2 if wrong input number, 3 if wrong output number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="175" column="9" bodyfile="nharamkor_vs.cpp" bodystart="175" bodyend="195"/>
        <references refid="comp__module_8cpp_1a4e937192165d4187e4bd5e4d70967eb5" compoundref="comp__module_8cpp" startline="13" endline="19">eggyezik</references>
        <references refid="classlista_1a5baaf78ac201a75e49f18110daed7fd6" compoundref="lista_8cpp" startline="62" endline="66">lista&lt; T &gt;::length</references>
        <referencedby refid="nharamkor__vs_8cpp_1a079960085332785c1fb971533a9912a9" compoundref="nharamkor__vs_8cpp" startline="206" endline="235">test_module</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1a079960085332785c1fb971533a9912a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">uint8_t</ref></type>
        <definition>uint8_t test_module</definition>
        <argsstring>(const char *str, lista&lt; prot_module_t * &gt; &amp;modulok, bool add=true)</argsstring>
        <name>test_module</name>
        <param>
          <type><ref refid="classlista" kindref="compound">const</ref> <ref refid="classlista" kindref="compound">char</ref> *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">lista</ref>&lt; <ref refid="classprot__module__t" kindref="compound">prot_module_t</ref> * &gt; &amp;</type>
          <declname>modulok</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">bool</ref></type>
          <declname>add</declname>
          <defval><ref refid="classlista" kindref="compound">true</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function to test a module with the given name and commands.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the name and commands of the module to be tested </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modulok</parametername>
</parameternamelist>
<parameterdescription>
<para>a list of module pointers to be tested against </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>add</parametername>
</parameternamelist>
<parameterdescription>
<para>flag to indicate whether to add the module</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successful, error code otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="206" column="9" bodyfile="nharamkor_vs.cpp" bodystart="206" bodyend="235"/>
        <references refid="classlista_1a3f48539cd27ef435ea20315183a7c48e" compoundref="lista_8cpp" startline="38" endline="45">lista&lt; T &gt;::add</references>
        <references refid="nharamkor__vs_8cpp_1adce48f6d81618ca9096f5b88a6e333ab" compoundref="nharamkor__vs_8cpp" startline="73" endline="107">kisbetujo</references>
        <references refid="nharamkor__vs_8cpp_1afb58d022f3fcaf90e41950da473cca92" compoundref="nharamkor__vs_8cpp" startline="115" endline="134">kisbetujo2</references>
        <references refid="nharamkor__vs_8cpp_1a079dcfedb64af966eab0a78d9a4c979d" compoundref="nharamkor__vs_8cpp" startline="175" endline="195">modulesteszt</references>
        <references refid="nharamkor__vs_8cpp_1a7f4e4e25704216d56a1bbe815546d655" compoundref="nharamkor__vs_8cpp" startline="143" endline="165">nagybetujo</references>
        <references refid="nharamkor__vs_8cpp_1a8394f5d2589de5e083e551414e4d1a92" compoundref="nharamkor__vs_8cpp" startline="57" endline="64">ujmnev_ell</references>
        <referencedby refid="nharamkor__vs_8cpp_1a28f543ce27108ae4de42d9991865237e" compoundref="nharamkor__vs_8cpp" startline="393" endline="400">input_handler_module</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1a89f3b5151cdc6346dcca285bca7084a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classlista" kindref="compound">typename</ref> <ref refid="classlista" kindref="compound">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="classlista" kindref="compound">bool</ref></type>
        <definition>bool instruct_handler_char_handler</definition>
        <argsstring>(uint8_t *inputs, uint8_t c, T &amp;state, uint8_t &amp;mods, size_t &amp;number)</argsstring>
        <name>instruct_handler_char_handler</name>
        <param>
          <type><ref refid="classlista" kindref="compound">uint8_t</ref> *</type>
          <declname>inputs</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">uint8_t</ref></type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">T</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">uint8_t</ref> &amp;</type>
          <declname>mods</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">size_t</ref> &amp;</type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A template function to handle different types of input characters and modify state accordingly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an array of uint8_t to store inputs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>the input character to handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to a template type T representing the current state </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mods</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to a uint8_t to store modifiers </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to a size_t to store a number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the input character is processed successfully, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="248" column="6" bodyfile="nharamkor_vs.cpp" bodystart="248" bodyend="269"/>
        <references refid="nharamkor__vs_8cpp_1ac668e8600ca0b3a3afa71eccef9ce070" compoundref="nharamkor__vs_8cpp" startline="17" endline="26">ismod</references>
        <references refid="nharamkor__vs_8cpp_1afbce817d76bf9bc1a433c1d83fc15d0b" compoundref="nharamkor__vs_8cpp" startline="33" endline="48">modulator</references>
        <referencedby refid="nharamkor__vs_8cpp_1a989b6e5b3b8815b8088e8f8ba6d7752c" compoundref="nharamkor__vs_8cpp" startline="282" endline="299">instruct_handler</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1a989b6e5b3b8815b8088e8f8ba6d7752c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">bool</ref></type>
        <definition>bool instruct_handler</definition>
        <argsstring>(char *s, module_t *&amp;m_main, uint8_t &amp;mods, size_t &amp;number, lista&lt; module_t * &gt; &amp;wait_to_do_modules)</argsstring>
        <name>instruct_handler</name>
        <param>
          <type><ref refid="classlista" kindref="compound">char</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classmodule__t" kindref="compound">module_t</ref> *&amp;</type>
          <declname>m_main</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">uint8_t</ref> &amp;</type>
          <declname>mods</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">size_t</ref> &amp;</type>
          <declname>number</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">lista</ref>&lt; <ref refid="classmodule__t" kindref="compound">module_t</ref> * &gt; &amp;</type>
          <declname>wait_to_do_modules</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A function to handle instructions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the instruction string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w_inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of <ref refid="classwire__t" kindref="compound">wire_t</ref> inputs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait_to_do_wires</parametername>
</parameternamelist>
<parameterdescription>
<para>a list of <ref refid="classwire__t" kindref="compound">wire_t</ref> pointers to wires, waiting to be processed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mods</parametername>
</parameternamelist>
<parameterdescription>
<para>a uint8_t representing modifications </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>a size_t representing a number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the function execution is successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="282" column="6" bodyfile="nharamkor_vs.cpp" bodystart="282" bodyend="299"/>
        <references refid="nharamkor__vs_8cpp_1a89f3b5151cdc6346dcca285bca7084a6" compoundref="nharamkor__vs_8cpp" startline="248" endline="269">instruct_handler_char_handler</references>
        <referencedby refid="nharamkor__vs_8cpp_1af09a2309c4133585955f671c2be21293" compoundref="nharamkor__vs_8cpp" startline="457" endline="478">input_handler_do</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1abe6c24302d4150af8e6211ec3a45ad0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">char</ref> *</type>
        <definition>char * getstring</definition>
        <argsstring>(std::istream &amp;in, size_t h=0)</argsstring>
        <name>getstring</name>
        <param>
          <type><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::istream</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">size_t</ref></type>
          <declname>h</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recursively reads characters from the input stream and stores them in a dynamically allocated char array.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream to read from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>the current size of the char array being built</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a dynamically allocated char array containing the characters read from the input stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="308" column="6" bodyfile="nharamkor_vs.cpp" bodystart="308" bodyend="321"/>
        <references refid="nharamkor__vs_8cpp_1abe6c24302d4150af8e6211ec3a45ad0d" compoundref="nharamkor__vs_8cpp" startline="308" endline="321">getstring</references>
        <referencedby refid="nharamkor__vs_8cpp_1abe6c24302d4150af8e6211ec3a45ad0d" compoundref="nharamkor__vs_8cpp" startline="308" endline="321">getstring</referencedby>
        <referencedby refid="nharamkor__vs_8cpp_1ab44d8e6ed4c39cb1c0cf792429db848e" compoundref="nharamkor__vs_8cpp" startline="491" endline="508">input_handler</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1a3e0f7cbe319cdfbb528b924d817885fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">bool</ref></type>
        <definition>bool print_module_error</definition>
        <argsstring>(uint8_t err)</argsstring>
        <name>print_module_error</name>
        <param>
          <type><ref refid="classlista" kindref="compound">uint8_t</ref></type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A function that prints error messages based on the error code passed in.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>err</parametername>
</parameternamelist>
<parameterdescription>
<para>the error code to determine which error message to print</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if error code is 0, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="329" column="6" bodyfile="nharamkor_vs.cpp" bodystart="329" bodyend="347"/>
        <references refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" compoundref="ossz_8h" startline="18" endline="18">lista&lt; T &gt;::lista</references>
        <referencedby refid="nharamkor__vs_8cpp_1a28f543ce27108ae4de42d9991865237e" compoundref="nharamkor__vs_8cpp" startline="393" endline="400">input_handler_module</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1a8e7995ef24cddb91ed4b4d47a03deb4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">void</ref></type>
        <definition>void print</definition>
        <argsstring>(module_t *&amp;m_main, bool kezd=true, bool lezar=true)</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="classmodule__t" kindref="compound">module_t</ref> *&amp;</type>
          <declname>m_main</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">bool</ref></type>
          <declname>kezd</declname>
          <defval><ref refid="classlista" kindref="compound">true</ref></defval>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">bool</ref></type>
          <declname>lezar</declname>
          <defval><ref refid="classlista" kindref="compound">true</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints the contents of the module to the console in a formatted manner.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m_main</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the module to be printed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kezd</parametername>
</parameternamelist>
<parameterdescription>
<para>flag indicating whether to include the beginning formatting </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lezar</parametername>
</parameternamelist>
<parameterdescription>
<para>flag indicating whether to include the ending formatting </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="355" column="6" bodyfile="nharamkor_vs.cpp" bodystart="355" bodyend="383"/>
        <references refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" compoundref="ossz_8h" startline="18" endline="18">lista&lt; T &gt;::lista</references>
        <referencedby refid="nharamkor__vs_8cpp_1af09a2309c4133585955f671c2be21293" compoundref="nharamkor__vs_8cpp" startline="457" endline="478">input_handler_do</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1ab44d8e6ed4c39cb1c0cf792429db848e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">void</ref></type>
        <definition>void input_handler</definition>
        <argsstring>(std::istream &amp;in, lista&lt; module_t * &gt; &amp;wait_to_do_modules, uint8_t &amp;mods, lista&lt; prot_module_t * &gt; &amp;modulok, module_t *&amp;m_main, lista&lt; char * &gt; &amp;insts)</argsstring>
        <name>input_handler</name>
        <param>
          <type><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::istream</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">lista</ref>&lt; <ref refid="classmodule__t" kindref="compound">module_t</ref> * &gt; &amp;</type>
          <declname>wait_to_do_modules</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">uint8_t</ref> &amp;</type>
          <declname>mods</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">lista</ref>&lt; <ref refid="classprot__module__t" kindref="compound">prot_module_t</ref> * &gt; &amp;</type>
          <declname>modulok</declname>
        </param>
        <param>
          <type><ref refid="classmodule__t" kindref="compound">module_t</ref> *&amp;</type>
          <declname>m_main</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">lista</ref>&lt; <ref refid="classlista" kindref="compound">char</ref> * &gt; &amp;</type>
          <declname>insts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handles input from the given input stream and performs various operations based on the input.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>the input stream to read from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w_inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>array of wire inputs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait_to_do_wires</parametername>
</parameternamelist>
<parameterdescription>
<para>list of <ref refid="classwire__t" kindref="compound">wire_t</ref> pointers to wires, waiting to be processed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mods</parametername>
</parameternamelist>
<parameterdescription>
<para>uint8_t representing modifications </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modulok</parametername>
</parameternamelist>
<parameterdescription>
<para>list of <ref refid="classprot__module__t" kindref="compound">prot_module_t</ref> pointers representing modules </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m_main</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the main module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insts</parametername>
</parameternamelist>
<parameterdescription>
<para>list of instructions </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="491" column="6" bodyfile="nharamkor_vs.cpp" bodystart="491" bodyend="508" declfile="nharamkor_vs.cpp" declline="384" declcolumn="6"/>
        <references refid="classlista_1a3f48539cd27ef435ea20315183a7c48e" compoundref="lista_8cpp" startline="38" endline="45">lista&lt; T &gt;::add</references>
        <references refid="nharamkor__vs_8cpp_1abe6c24302d4150af8e6211ec3a45ad0d" compoundref="nharamkor__vs_8cpp" startline="308" endline="321">getstring</references>
        <references refid="nharamkor__vs_8cpp_1af09a2309c4133585955f671c2be21293" compoundref="nharamkor__vs_8cpp" startline="457" endline="478">input_handler_do</references>
        <references refid="nharamkor__vs_8cpp_1a28f543ce27108ae4de42d9991865237e" compoundref="nharamkor__vs_8cpp" startline="393" endline="400">input_handler_module</references>
        <references refid="nharamkor__vs_8cpp_1ab7c916fb6815401293901bf9e02feb5d" compoundref="nharamkor__vs_8cpp" startline="412" endline="422">input_handler_read</references>
        <references refid="nharamkor__vs_8cpp_1aedc7074de3b40368806c1c432f215d92" compoundref="nharamkor__vs_8cpp" startline="429" endline="445">input_handler_write</references>
        <references refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" compoundref="ossz_8h" startline="18" endline="18">lista&lt; T &gt;::lista</references>
        <referencedby refid="nharamkor__vs_8cpp_1ab7c916fb6815401293901bf9e02feb5d" compoundref="nharamkor__vs_8cpp" startline="412" endline="422">input_handler_read</referencedby>
        <referencedby refid="nharamkor__vs_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="nharamkor__vs_8cpp" startline="514" endline="530">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1a28f543ce27108ae4de42d9991865237e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">void</ref></type>
        <definition>void input_handler_module</definition>
        <argsstring>(char *s, lista&lt; prot_module_t * &gt; &amp;modulok, module_t *&amp;m_main)</argsstring>
        <name>input_handler_module</name>
        <param>
          <type><ref refid="classlista" kindref="compound">char</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">lista</ref>&lt; <ref refid="classprot__module__t" kindref="compound">prot_module_t</ref> * &gt; &amp;</type>
          <declname>modulok</declname>
        </param>
        <param>
          <type><ref refid="classmodule__t" kindref="compound">module_t</ref> *&amp;</type>
          <declname>m_main</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handles input for new module and sets the main module if the module is &quot;_main&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>input string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w_inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>array of wire inputs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modulok</parametername>
</parameternamelist>
<parameterdescription>
<para>list of modules </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m_main</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the main module </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="393" column="6" bodyfile="nharamkor_vs.cpp" bodystart="393" bodyend="400"/>
        <references refid="classlista_1a5baaf78ac201a75e49f18110daed7fd6" compoundref="lista_8cpp" startline="62" endline="66">lista&lt; T &gt;::length</references>
        <references refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" compoundref="ossz_8h" startline="18" endline="18">lista&lt; T &gt;::lista</references>
        <references refid="nharamkor__vs_8cpp_1a3e0f7cbe319cdfbb528b924d817885fd" compoundref="nharamkor__vs_8cpp" startline="329" endline="347">print_module_error</references>
        <references refid="nharamkor__vs_8cpp_1a079960085332785c1fb971533a9912a9" compoundref="nharamkor__vs_8cpp" startline="206" endline="235">test_module</references>
        <referencedby refid="nharamkor__vs_8cpp_1ab44d8e6ed4c39cb1c0cf792429db848e" compoundref="nharamkor__vs_8cpp" startline="491" endline="508">input_handler</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1ab7c916fb6815401293901bf9e02feb5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">void</ref></type>
        <definition>void input_handler_read</definition>
        <argsstring>(char *s, lista&lt; module_t * &gt; &amp;wait_to_do_wires, uint8_t &amp;mods, lista&lt; prot_module_t * &gt; &amp;modulok, module_t *&amp;m_main, lista&lt; char * &gt; &amp;insts)</argsstring>
        <name>input_handler_read</name>
        <param>
          <type><ref refid="classlista" kindref="compound">char</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">lista</ref>&lt; <ref refid="classmodule__t" kindref="compound">module_t</ref> * &gt; &amp;</type>
          <declname>wait_to_do_wires</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">uint8_t</ref> &amp;</type>
          <declname>mods</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">lista</ref>&lt; <ref refid="classprot__module__t" kindref="compound">prot_module_t</ref> * &gt; &amp;</type>
          <declname>modulok</declname>
        </param>
        <param>
          <type><ref refid="classmodule__t" kindref="compound">module_t</ref> *&amp;</type>
          <declname>m_main</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">lista</ref>&lt; <ref refid="classlista" kindref="compound">char</ref> * &gt; &amp;</type>
          <declname>insts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A function to handle reading file, processing it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the input file name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w_inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>array of wire inputs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait_to_do_wires</parametername>
</parameternamelist>
<parameterdescription>
<para>list of <ref refid="classwire__t" kindref="compound">wire_t</ref> pointers to wires, waiting to be processed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mods</parametername>
</parameternamelist>
<parameterdescription>
<para>a uint8_t representing modifications </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modulok</parametername>
</parameternamelist>
<parameterdescription>
<para>list of modules </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m_main</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the main module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insts</parametername>
</parameternamelist>
<parameterdescription>
<para>list of instructions </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="412" column="6" bodyfile="nharamkor_vs.cpp" bodystart="412" bodyend="422"/>
        <references refid="nharamkor__vs_8cpp_1ab44d8e6ed4c39cb1c0cf792429db848e" compoundref="nharamkor__vs_8cpp" startline="491" endline="508">input_handler</references>
        <references refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" compoundref="ossz_8h" startline="18" endline="18">lista&lt; T &gt;::lista</references>
        <referencedby refid="nharamkor__vs_8cpp_1ab44d8e6ed4c39cb1c0cf792429db848e" compoundref="nharamkor__vs_8cpp" startline="491" endline="508">input_handler</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1aedc7074de3b40368806c1c432f215d92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">void</ref></type>
        <definition>void input_handler_write</definition>
        <argsstring>(char *s, lista&lt; char * &gt; &amp;insts)</argsstring>
        <name>input_handler_write</name>
        <param>
          <type><ref refid="classlista" kindref="compound">char</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">lista</ref>&lt; <ref refid="classlista" kindref="compound">char</ref> * &gt; &amp;</type>
          <declname>insts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A function to handle writing instructions to file if the user wants.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the output file name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insts</parametername>
</parameternamelist>
<parameterdescription>
<para>list of instructions </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="429" column="6" bodyfile="nharamkor_vs.cpp" bodystart="429" bodyend="445"/>
        <references refid="classlista_1a5baaf78ac201a75e49f18110daed7fd6" compoundref="lista_8cpp" startline="62" endline="66">lista&lt; T &gt;::length</references>
        <references refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" compoundref="ossz_8h" startline="18" endline="18">lista&lt; T &gt;::lista</references>
        <referencedby refid="nharamkor__vs_8cpp_1ab44d8e6ed4c39cb1c0cf792429db848e" compoundref="nharamkor__vs_8cpp" startline="491" endline="508">input_handler</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1af09a2309c4133585955f671c2be21293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">bool</ref></type>
        <definition>bool input_handler_do</definition>
        <argsstring>(char *s, lista&lt; module_t * &gt; &amp;wait_to_do_modules, uint8_t &amp;mods, module_t *&amp;m_main)</argsstring>
        <name>input_handler_do</name>
        <param>
          <type><ref refid="classlista" kindref="compound">char</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">lista</ref>&lt; <ref refid="classmodule__t" kindref="compound">module_t</ref> * &gt; &amp;</type>
          <declname>wait_to_do_modules</declname>
        </param>
        <param>
          <type><ref refid="classlista" kindref="compound">uint8_t</ref> &amp;</type>
          <declname>mods</declname>
        </param>
        <param>
          <type><ref refid="classmodule__t" kindref="compound">module_t</ref> *&amp;</type>
          <declname>m_main</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A function that handles input based on the given parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the input character array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w_inputs</parametername>
</parameternamelist>
<parameterdescription>
<para>array of wire inputs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait_to_do_wires</parametername>
</parameternamelist>
<parameterdescription>
<para>list of <ref refid="classwire__t" kindref="compound">wire_t</ref> pointers to wires, waiting to be processed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mods</parametername>
</parameternamelist>
<parameterdescription>
<para>a uint8_t representing modifications </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m_main</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the main module</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if input handling is successful, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="457" column="6" bodyfile="nharamkor_vs.cpp" bodystart="457" bodyend="478"/>
        <references refid="classlista_1a3f48539cd27ef435ea20315183a7c48e" compoundref="lista_8cpp" startline="38" endline="45">lista&lt; T &gt;::add</references>
        <references refid="nharamkor__vs_8cpp_1a989b6e5b3b8815b8088e8f8ba6d7752c" compoundref="nharamkor__vs_8cpp" startline="282" endline="299">instruct_handler</references>
        <references refid="classlista_1a5baaf78ac201a75e49f18110daed7fd6" compoundref="lista_8cpp" startline="62" endline="66">lista&lt; T &gt;::length</references>
        <references refid="nharamkor__vs_8cpp_1a8e7995ef24cddb91ed4b4d47a03deb4d" compoundref="nharamkor__vs_8cpp" startline="355" endline="383">print</references>
        <references refid="classlista_1a91e03590c673ff5b3b928acc9dc6275d" compoundref="lista_8cpp" startline="73" endline="87">lista&lt; T &gt;::rem</references>
        <referencedby refid="nharamkor__vs_8cpp_1ab44d8e6ed4c39cb1c0cf792429db848e" compoundref="nharamkor__vs_8cpp" startline="491" endline="508">input_handler</referencedby>
      </memberdef>
      <memberdef kind="function" id="nharamkor__vs_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classlista" kindref="compound">int</ref></type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Main function... That&apos;s all. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nharamkor_vs.cpp" line="514" column="5" bodyfile="nharamkor_vs.cpp" bodystart="514" bodyend="530"/>
        <references refid="classlista_1a12a87ad57faeebe390e6514514dd85a7" compoundref="lista_8cpp" startline="92" endline="96">lista&lt; T &gt;::din</references>
        <references refid="classlista_1a10bc0895ed694524a7031254718607ed" compoundref="lista_8cpp" startline="101" endline="105">lista&lt; T &gt;::dinl</references>
        <references refid="nharamkor__vs_8cpp_1ab44d8e6ed4c39cb1c0cf792429db848e" compoundref="nharamkor__vs_8cpp" startline="491" endline="508">input_handler</references>
        <references refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" compoundref="ossz_8h" startline="18" endline="18">lista&lt; T &gt;::lista</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>nharamkor_vs.cpp<sp/>:<sp/>This<sp/>file<sp/>contains<sp/>the<sp/>&apos;main&apos;<sp/>function.<sp/>Program<sp/>execution<sp/>begins<sp/>and<sp/>ends<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="comp__module_8h" kindref="compound">comp_module.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="text__module_8h" kindref="compound">text_module.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="karakter__keszlet_8h" kindref="compound">karakter_keszlet.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="nharamkor__vs_8cpp_1ac668e8600ca0b3a3afa71eccef9ce070" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="nharamkor__vs_8cpp_1ac668e8600ca0b3a3afa71eccef9ce070" kindref="member">ismod</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">c</ref>)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">c</ref>)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33" refid="nharamkor__vs_8cpp_1afbce817d76bf9bc1a433c1d83fc15d0b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nharamkor__vs_8cpp_1afbce817d76bf9bc1a433c1d83fc15d0b" kindref="member">modulator</ref>(<ref refid="classlista" kindref="compound">uint8_t</ref><sp/><ref refid="classlista" kindref="compound">c</ref>,<sp/><ref refid="classlista" kindref="compound">uint8_t</ref>&amp;<sp/><ref refid="classlista" kindref="compound">mods</ref>)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">c</ref>)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">mods</ref><sp/>|=<sp/>0b00000010;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">mods</ref><sp/>&amp;=<sp/>0b11111110;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">mods</ref><sp/>|=<sp/>0b00000001;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">mods</ref><sp/>|=<sp/>0b10000000;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57" refid="nharamkor__vs_8cpp_1a8394f5d2589de5e083e551414e4d1a92" refkind="member"><highlight class="normal"><ref refid="classlista" kindref="compound">uint8_t</ref><sp/><ref refid="nharamkor__vs_8cpp_1a8394f5d2589de5e083e551414e4d1a92" kindref="member">ujmnev_ell</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>nev,<sp/><ref refid="classlista" kindref="compound">lista&lt;prot_module_t*&gt;</ref>&amp;<sp/>modules)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nev[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight><highlight class="comment">//nincs<sp/>_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="classlista" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classlista" kindref="compound">strlen</ref>(nev);<sp/><ref refid="classlista" kindref="compound">i</ref>++)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="karakter__keszlet_8h_1adcfa746252c8707e3eacd9c7d865c0a0" kindref="member">kk</ref>[(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(nev[<ref refid="classlista" kindref="compound">i</ref>])])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight><highlight class="comment">//<sp/>rossz<sp/>karakterek</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="classlista" kindref="compound">i</ref><sp/>&lt;<sp/>modules.<ref refid="classlista_1a5baaf78ac201a75e49f18110daed7fd6" kindref="member">length</ref>();<sp/><ref refid="classlista" kindref="compound">i</ref>++)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">strcmp</ref>(nev,<sp/>modules[<ref refid="classlista" kindref="compound">i</ref>]-&gt;getnev())==0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight><highlight class="comment">//már<sp/>foglalt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="nharamkor__vs_8cpp_1adce48f6d81618ca9096f5b88a6e333ab" refkind="member"><highlight class="normal"><ref refid="classlista" kindref="compound">uint8_t</ref><sp/><ref refid="nharamkor__vs_8cpp_1adce48f6d81618ca9096f5b88a6e333ab" kindref="member">kisbetujo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classlista" kindref="compound">str</ref>)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">b</ref>[26]{<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ertek<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">notch</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">iserz</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="classlista" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classlista" kindref="compound">strlen</ref>(<ref refid="classlista" kindref="compound">str</ref>);<sp/><ref refid="classlista" kindref="compound">i</ref>++){</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">)<ref refid="classlista" kindref="compound">iserz</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)<ref refid="classlista" kindref="compound">iserz</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">iserz</ref>)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">islower</ref>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]))<sp/><ref refid="classlista" kindref="compound">b</ref>[<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">notch</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight><highlight class="comment">//hibas<sp/>forma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ertek<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">notch</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal"><sp/>||<sp/><ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;|&apos;</highlight><highlight class="normal"><sp/>||<sp/><ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal"><sp/>||<sp/><ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(ertek<sp/>||<sp/><ref refid="classlista" kindref="compound">notch</ref>))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight><highlight class="comment">//hibas<sp/>forma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ertek<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">notch</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">islower</ref>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>])<sp/>||<sp/><ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/><ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ertek)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight><highlight class="comment">//hibas<sp/>forma</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ertek<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">notch</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">islower</ref>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]))<sp/><ref refid="classlista" kindref="compound">b</ref>[<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">j</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">b</ref>[<ref refid="classlista" kindref="compound">j</ref>++]);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">j</ref><sp/>&lt;<sp/>26)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">b</ref>[<ref refid="classlista" kindref="compound">j</ref>++])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115" refid="nharamkor__vs_8cpp_1afb58d022f3fcaf90e41950da473cca92" refkind="member"><highlight class="normal"><ref refid="classlista" kindref="compound">uint8_t</ref><sp/><ref refid="nharamkor__vs_8cpp_1afb58d022f3fcaf90e41950da473cca92" kindref="member">kisbetujo2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classlista" kindref="compound">str</ref>)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">ib</ref>[26]{<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">ob</ref>[26]{<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">outp</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structport" kindref="compound">port</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="classlista" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classlista" kindref="compound">strlen</ref>(<ref refid="classlista" kindref="compound">str</ref>);<sp/><ref refid="classlista" kindref="compound">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">)<sp/>{<sp/><ref refid="structport" kindref="compound">port</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><ref refid="classlista" kindref="compound">outp</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">)<sp/><ref refid="structport" kindref="compound">port</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">)<sp/><ref refid="classlista" kindref="compound">outp</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">islower</ref>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>])&amp;&amp;<ref refid="structport" kindref="compound">port</ref>)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">outp</ref><sp/>&amp;&amp;<sp/><ref refid="classlista" kindref="compound">ob</ref>[<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight><highlight class="comment">//második<sp/>kivezetés</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="classlista" kindref="compound">outp</ref><sp/>?<sp/><ref refid="classlista" kindref="compound">ob</ref><sp/>:<sp/><ref refid="classlista" kindref="compound">ib</ref>)[<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">j</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">ib</ref>[<ref refid="classlista" kindref="compound">j</ref>]<sp/>&amp;&amp;<sp/><ref refid="classlista" kindref="compound">j</ref>++<sp/>&lt;<sp/>26);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">ob</ref>[<ref refid="classlista" kindref="compound">j</ref>]<sp/>&amp;&amp;<sp/><ref refid="classlista" kindref="compound">j</ref><sp/>&lt;<sp/>26)</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">ib</ref>[<ref refid="classlista" kindref="compound">j</ref>++])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight><highlight class="comment">//nem<sp/>jó<sp/>bekötések</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">j</ref><sp/>&lt;<sp/>26)</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">ib</ref>[<ref refid="classlista" kindref="compound">j</ref>]<sp/>||<sp/><ref refid="classlista" kindref="compound">ob</ref>[<ref refid="classlista" kindref="compound">j</ref>++])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight><highlight class="comment">//nem<sp/>jó<sp/>bekötések</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="nharamkor__vs_8cpp_1a7f4e4e25704216d56a1bbe815546d655" refkind="member"><highlight class="normal"><ref refid="classlista" kindref="compound">uint8_t</ref><sp/><ref refid="nharamkor__vs_8cpp_1a7f4e4e25704216d56a1bbe815546d655" kindref="member">nagybetujo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classlista" kindref="compound">str</ref>)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">ib</ref>[26]{<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">ob</ref>[26]{<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">outp</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structport" kindref="compound">port</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="classlista" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classlista" kindref="compound">strlen</ref>(<ref refid="classlista" kindref="compound">str</ref>);<sp/><ref refid="classlista" kindref="compound">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">)<sp/>{<sp/><ref refid="structport" kindref="compound">port</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><ref refid="classlista" kindref="compound">outp</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">)<sp/><ref refid="structport" kindref="compound">port</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">)<sp/><ref refid="classlista" kindref="compound">outp</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">isupper</ref>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>])&amp;&amp;<ref refid="structport" kindref="compound">port</ref>)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">outp</ref><sp/>&amp;&amp;<sp/><ref refid="classlista" kindref="compound">ob</ref>[<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">])<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight><highlight class="comment">//második<sp/>kivezetés</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="classlista" kindref="compound">outp</ref><sp/>?<sp/><ref refid="classlista" kindref="compound">ob</ref><sp/>:<sp/><ref refid="classlista" kindref="compound">ib</ref>)[<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">j</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">ob</ref>[<ref refid="classlista" kindref="compound">j</ref>]){</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">ob</ref>[<ref refid="classlista" kindref="compound">j</ref>]<sp/>!=<sp/><ref refid="classlista" kindref="compound">ib</ref>[<ref refid="classlista" kindref="compound">j</ref>])</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight><highlight class="comment">//nem<sp/>jó<sp/>bekötések</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">j</ref>++;}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">j</ref><sp/>&lt;<sp/>26){</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">ob</ref>[<ref refid="classlista" kindref="compound">j</ref>]<sp/>||<sp/><ref refid="classlista" kindref="compound">ib</ref>[<ref refid="classlista" kindref="compound">j</ref>])</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight><highlight class="comment">//nem<sp/>jó<sp/>bekötések</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">j</ref>++;}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="nharamkor__vs_8cpp_1a079dcfedb64af966eab0a78d9a4c979d" refkind="member"><highlight class="normal"><ref refid="classlista" kindref="compound">uint8_t</ref><sp/><ref refid="nharamkor__vs_8cpp_1a079dcfedb64af966eab0a78d9a4c979d" kindref="member">modulesteszt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classlista" kindref="compound">str</ref>,<sp/><ref refid="classlista" kindref="compound">lista&lt;prot_module_t*&gt;</ref>&amp;<sp/>modules)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">k</ref><sp/>=<sp/>0,<sp/><ref refid="classlista" kindref="compound">v</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">k</ref><sp/>&lt;<sp/><ref refid="classlista" kindref="compound">strlen</ref>(<ref refid="classlista" kindref="compound">str</ref>))<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">v</ref>]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="classlista" kindref="compound">v</ref><sp/>&lt;<sp/><ref refid="classlista" kindref="compound">strlen</ref>(<ref refid="classlista" kindref="compound">str</ref>))<sp/><ref refid="classlista" kindref="compound">v</ref>++;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">j</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="classlista" kindref="compound">i</ref><sp/>&lt;<sp/>modules.<ref refid="classlista_1a5baaf78ac201a75e49f18110daed7fd6" kindref="member">length</ref>();<sp/><ref refid="classlista" kindref="compound">i</ref>++)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="comp__module_8cpp_1a4e937192165d4187e4bd5e4d70967eb5" kindref="member">eggyezik</ref>(modules[<ref refid="classlista" kindref="compound">i</ref>]-&gt;getnev(),<sp/><ref refid="classlista" kindref="compound">str</ref>,<sp/><ref refid="classlista" kindref="compound">k</ref>,<sp/><ref refid="classlista" kindref="compound">v</ref>))<sp/><ref refid="classlista" kindref="compound">j</ref><sp/>=<sp/><ref refid="classlista" kindref="compound">i</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">j</ref><sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight><highlight class="comment">//nemlétező<sp/>modul</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmodule__t" kindref="compound">module_t</ref>*<sp/><ref refid="classlista" kindref="compound">ref</ref><sp/>=<sp/>modules[<ref refid="classlista" kindref="compound">j</ref>]-&gt;getprot();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">in</ref><sp/>=<sp/><ref refid="classlista" kindref="compound">ref</ref>-&gt;get_be_num();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">out</ref><sp/>=<sp/><ref refid="classlista" kindref="compound">ref</ref>-&gt;get_ki_num();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">v</ref><sp/>=<sp/><ref refid="classlista" kindref="compound">k</ref><sp/>=<sp/><ref refid="classlista" kindref="compound">v</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">v</ref>]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="classlista" kindref="compound">v</ref><sp/>&lt;<sp/><ref refid="classlista" kindref="compound">k</ref><sp/>+<sp/><ref refid="classlista" kindref="compound">in</ref>)<sp/><ref refid="classlista" kindref="compound">v</ref>++;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">v</ref>]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>||<sp/><ref refid="classlista" kindref="compound">v</ref><sp/>!=<sp/><ref refid="classlista" kindref="compound">k</ref><sp/>+<sp/><ref refid="classlista" kindref="compound">in</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight><highlight class="comment">//rossz<sp/>inputszám</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">v</ref><sp/>=<sp/><ref refid="classlista" kindref="compound">k</ref><sp/>=<sp/><ref refid="classlista" kindref="compound">v</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">v</ref>]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/><ref refid="classlista" kindref="compound">v</ref><sp/>&lt;<sp/><ref refid="classlista" kindref="compound">k</ref><sp/>+<sp/><ref refid="classlista" kindref="compound">out</ref>)<sp/><ref refid="classlista" kindref="compound">v</ref>++;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">str</ref>[<ref refid="classlista" kindref="compound">v</ref>]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal"><sp/>||<sp/><ref refid="classlista" kindref="compound">v</ref><sp/>!=<sp/><ref refid="classlista" kindref="compound">k</ref><sp/>+<sp/><ref refid="classlista" kindref="compound">out</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight><highlight class="comment">//rossz<sp/>outputszám</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">v</ref><sp/>=<sp/><ref refid="classlista" kindref="compound">k</ref><sp/>=<sp/><ref refid="classlista" kindref="compound">v</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="nharamkor__vs_8cpp_1a079960085332785c1fb971533a9912a9" refkind="member"><highlight class="normal"><ref refid="classlista" kindref="compound">uint8_t</ref><sp/><ref refid="nharamkor__vs_8cpp_1a079960085332785c1fb971533a9912a9" kindref="member">test_module</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classlista" kindref="compound">str</ref>,<sp/><ref refid="classlista" kindref="compound">lista&lt;prot_module_t*&gt;</ref>&amp;<sp/><ref refid="classlista" kindref="compound">modulok</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>add<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>nev<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[<ref refid="classlista" kindref="compound">strlen</ref>(<ref refid="classlista" kindref="compound">str</ref>)+1];</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>parancsok<sp/>=<sp/>nev;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">strcpy_s</ref>(nev,<sp/><ref refid="classlista" kindref="compound">strlen</ref>(<ref refid="classlista" kindref="compound">str</ref>)<sp/>+<sp/>1,<sp/><ref refid="classlista" kindref="compound">str</ref>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*parancsok<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*parancsok<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>parancsok++;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*parancsok<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>nev;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight><highlight class="comment">//nincs<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>*parancsok<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>parancsok++;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">uint8_t</ref><sp/><ref refid="classlista" kindref="compound">un</ref><sp/>=<sp/><ref refid="nharamkor__vs_8cpp_1a8394f5d2589de5e083e551414e4d1a92" kindref="member">ujmnev_ell</ref>(nev,<sp/><ref refid="classlista" kindref="compound">modulok</ref>);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">un</ref><sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>nev;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">un</ref><sp/>+<sp/>1;<sp/>}</highlight><highlight class="comment">//<sp/>rossz<sp/>név</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parancsok[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">)<sp/>{</highlight><highlight class="comment">//comp_module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">uint8_t</ref><sp/><ref refid="classlista" kindref="compound">kb</ref><sp/>=<sp/><ref refid="nharamkor__vs_8cpp_1afb58d022f3fcaf90e41950da473cca92" kindref="member">kisbetujo2</ref>(parancsok),<sp/><ref refid="classlista" kindref="compound">nb</ref><sp/>=<sp/><ref refid="nharamkor__vs_8cpp_1a7f4e4e25704216d56a1bbe815546d655" kindref="member">nagybetujo</ref>(parancsok),<sp/><ref refid="classlista" kindref="compound">mt</ref><sp/>=<sp/><ref refid="nharamkor__vs_8cpp_1a079dcfedb64af966eab0a78d9a4c979d" kindref="member">modulesteszt</ref>(parancsok,<sp/><ref refid="classlista" kindref="compound">modulok</ref>);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">kb</ref><sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>nev;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">kb</ref>+4;<sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">nb</ref><sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>nev;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">nb</ref>+4;<sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">mt</ref><sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>nev;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">mt</ref>+6;<sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(add)<sp/><ref refid="classlista" kindref="compound">modulok</ref>.<ref refid="classlista_1a3f48539cd27ef435ea20315183a7c48e" kindref="member">add</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classprot__module__t" kindref="compound">prot_module_t</ref>(nev,<sp/>(<ref refid="classmodule__t" kindref="compound">module_t</ref>*)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classcomp__module__t" kindref="compound">comp_module_t</ref>(parancsok,<sp/><ref refid="classlista" kindref="compound">modulok</ref>)));</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>nev;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight><highlight class="comment">//text_module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">uint8_t</ref><sp/><ref refid="classlista" kindref="compound">kb</ref><sp/>=<sp/><ref refid="nharamkor__vs_8cpp_1adce48f6d81618ca9096f5b88a6e333ab" kindref="member">kisbetujo</ref>(parancsok);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">kb</ref><sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>nev;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">kb</ref>+9;<sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(add){</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">modulok</ref>.<ref refid="classlista_1a3f48539cd27ef435ea20315183a7c48e" kindref="member">add</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classprot__module__t" kindref="compound">prot_module_t</ref>(nev,<sp/>(<ref refid="classmodule__t" kindref="compound">module_t</ref>*)<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtext__module__t" kindref="compound">text_module_t</ref>(parancsok)));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>nev;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="248" refid="nharamkor__vs_8cpp_1a89f3b5151cdc6346dcca285bca7084a6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="nharamkor__vs_8cpp_1a89f3b5151cdc6346dcca285bca7084a6" kindref="member">instruct_handler_char_handler</ref>(<ref refid="classlista" kindref="compound">uint8_t</ref>*<sp/><ref refid="classlista" kindref="compound">inputs</ref>,<sp/><ref refid="classlista" kindref="compound">uint8_t</ref><sp/><ref refid="classlista" kindref="compound">c</ref>,<sp/><ref refid="classlista" kindref="compound">T</ref>&amp;<sp/><ref refid="classlista" kindref="compound">state</ref>,<sp/><ref refid="classlista" kindref="compound">uint8_t</ref>&amp;<sp/><ref refid="classlista" kindref="compound">mods</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/><ref refid="classlista" kindref="compound">number</ref>)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><ref refid="classlista" kindref="compound">input</ref>,<sp/><ref refid="classlista" kindref="compound">num</ref>,<sp/><ref refid="classlista" kindref="compound">mod</ref><sp/>};</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">isalpha</ref>(<ref refid="classlista" kindref="compound">c</ref>)<sp/>&amp;&amp;<sp/><ref refid="classlista" kindref="compound">state</ref><sp/>==<sp/>(<ref refid="classlista" kindref="compound">T</ref>)<ref refid="classlista" kindref="compound">input</ref>)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">isupper</ref>(<ref refid="classlista" kindref="compound">c</ref>))</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">inputs</ref>[<ref refid="classlista" kindref="compound">c</ref><sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">islower</ref>(<ref refid="classlista" kindref="compound">c</ref>))</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">inputs</ref>[<ref refid="classlista" kindref="compound">c</ref><sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">isdigit</ref>(<ref refid="classlista" kindref="compound">c</ref>)<sp/>&amp;&amp;<sp/>(<ref refid="classlista" kindref="compound">state</ref><sp/>==<sp/>(<ref refid="classlista" kindref="compound">T</ref>)<ref refid="classlista" kindref="compound">input</ref><sp/>||<sp/><ref refid="classlista" kindref="compound">state</ref><sp/>==<sp/>(<ref refid="classlista" kindref="compound">T</ref>)<ref refid="classlista" kindref="compound">num</ref>))<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">state</ref><sp/>=<sp/>(<ref refid="classlista" kindref="compound">T</ref>)<ref refid="classlista" kindref="compound">num</ref>;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">number</ref><sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">number</ref><sp/>+=<sp/><ref refid="classlista" kindref="compound">c</ref><sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="nharamkor__vs_8cpp_1ac668e8600ca0b3a3afa71eccef9ce070" kindref="member">ismod</ref>(<ref refid="classlista" kindref="compound">c</ref>)<sp/>&amp;&amp;<sp/>(<ref refid="classlista" kindref="compound">state</ref><sp/>==<sp/>(<ref refid="classlista" kindref="compound">T</ref>)<ref refid="classlista" kindref="compound">input</ref><sp/>||<sp/><ref refid="classlista" kindref="compound">state</ref><sp/>==<sp/>(<ref refid="classlista" kindref="compound">T</ref>)<ref refid="classlista" kindref="compound">num</ref><sp/>||<sp/><ref refid="classlista" kindref="compound">state</ref><sp/>==<sp/>(<ref refid="classlista" kindref="compound">T</ref>)<ref refid="classlista" kindref="compound">mod</ref>))<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">state</ref><sp/>=<sp/>(<ref refid="classlista" kindref="compound">T</ref>)<ref refid="classlista" kindref="compound">mod</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nharamkor__vs_8cpp_1afbce817d76bf9bc1a433c1d83fc15d0b" kindref="member">modulator</ref>(<ref refid="classlista" kindref="compound">c</ref>,<sp/><ref refid="classlista" kindref="compound">mods</ref>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="282" refid="nharamkor__vs_8cpp_1a989b6e5b3b8815b8088e8f8ba6d7752c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="nharamkor__vs_8cpp_1a989b6e5b3b8815b8088e8f8ba6d7752c" kindref="member">instruct_handler</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classlista" kindref="compound">s</ref>,<sp/><ref refid="classmodule__t" kindref="compound">module_t</ref>*&amp;<sp/><ref refid="classlista" kindref="compound">m_main</ref>,<sp/><ref refid="classlista" kindref="compound">uint8_t</ref>&amp;<sp/><ref refid="classlista" kindref="compound">mods</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/><ref refid="classlista" kindref="compound">number</ref>,<sp/><ref refid="classlista" kindref="compound">lista&lt;module_t*&gt;</ref>&amp;<sp/><ref refid="classlista" kindref="compound">wait_to_do_modules</ref>)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal">{<ref refid="classlista" kindref="compound">input</ref>,<sp/><ref refid="classlista" kindref="compound">num</ref>,<sp/><ref refid="classlista" kindref="compound">mod</ref>}<ref refid="classlista" kindref="compound">state</ref><sp/>=<sp/><ref refid="classlista" kindref="compound">input</ref>;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">uint8_t</ref><sp/><ref refid="classlista" kindref="compound">inputs</ref>[26];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="classlista" kindref="compound">i</ref><sp/>&lt;<sp/>26;<sp/><ref refid="classlista" kindref="compound">i</ref>++)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">inputs</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">number</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">i</ref>=0;<ref refid="classlista" kindref="compound">i</ref>&lt;<ref refid="classlista" kindref="compound">strlen</ref>(<ref refid="classlista" kindref="compound">s</ref>);<ref refid="classlista" kindref="compound">i</ref>++)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="nharamkor__vs_8cpp_1a89f3b5151cdc6346dcca285bca7084a6" kindref="member">instruct_handler_char_handler</ref>(<ref refid="classlista" kindref="compound">inputs</ref>,<sp/><ref refid="classlista" kindref="compound">s</ref>[<ref refid="classlista" kindref="compound">i</ref>],<sp/><ref refid="classlista" kindref="compound">state</ref>,<sp/><ref refid="classlista" kindref="compound">mods</ref>,<sp/><ref refid="classlista" kindref="compound">number</ref>))</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">m_main</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="classlista" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classlista" kindref="compound">m_main</ref>-&gt;get_be_num();<sp/><ref refid="classlista" kindref="compound">i</ref>++)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">inputs</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">inputs</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>!=<sp/><ref refid="classlista" kindref="compound">m_main</ref>-&gt;get_be_ertek(<ref refid="classlista" kindref="compound">i</ref>))<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">m_main</ref>-&gt;set_be(<ref refid="classlista" kindref="compound">i</ref>,<sp/><ref refid="classlista" kindref="compound">inputs</ref>[<ref refid="classlista" kindref="compound">i</ref>]);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">m_main</ref>-&gt;add_to_list(<ref refid="classlista" kindref="compound">wait_to_do_modules</ref>,<sp/><ref refid="classlista" kindref="compound">i</ref>);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308" refid="nharamkor__vs_8cpp_1abe6c24302d4150af8e6211ec3a45ad0d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="nharamkor__vs_8cpp_1abe6c24302d4150af8e6211ec3a45ad0d" kindref="member">getstring</ref>(<ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::istream</ref>&amp;<sp/><ref refid="classlista" kindref="compound">in</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">h</ref><sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">c</ref>;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classlista" kindref="compound">ret</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">in</ref>.get(<ref refid="classlista" kindref="compound">c</ref>);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">in</ref>.eof()<sp/>||<sp/><ref refid="classlista" kindref="compound">c</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">ret</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[<ref refid="classlista" kindref="compound">h</ref><sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">ret</ref>[<ref refid="classlista" kindref="compound">h</ref>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">ret</ref><sp/>=<sp/><ref refid="nharamkor__vs_8cpp_1abe6c24302d4150af8e6211ec3a45ad0d" kindref="member">getstring</ref>(<ref refid="classlista" kindref="compound">in</ref>,<sp/><ref refid="classlista" kindref="compound">h</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">ret</ref>[<ref refid="classlista" kindref="compound">h</ref>]<sp/>=<sp/><ref refid="classlista" kindref="compound">c</ref>;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">ret</ref>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329" refid="nharamkor__vs_8cpp_1a3e0f7cbe319cdfbb528b924d817885fd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="nharamkor__vs_8cpp_1a3e0f7cbe319cdfbb528b924d817885fd" kindref="member">print_module_error</ref>(<ref refid="classlista" kindref="compound">uint8_t</ref><sp/><ref refid="classlista" kindref="compound">err</ref>)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">err</ref>)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nincs<sp/>:<sp/>jel\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nem<sp/>_<sp/>val<sp/>kezdodo<sp/>nev\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;rossz<sp/>karakter<sp/>a<sp/>nevben\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;mar<sp/>foglalt<sp/>nev\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:<sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;masodik<sp/>kivezetes<sp/>comp_module-ban\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:<sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nem<sp/>jo<sp/>bekotes<sp/>comp_module-ban\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:<sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nemletezo<sp/>module<sp/>comp_module-ban\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:<sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;rossz<sp/>inputszam<sp/>comp_module-ban\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>9:<sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;rossz<sp/>outputszam<sp/>comp_module-ban\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>10:<sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nem<sp/>jo<sp/>bekotes<sp/>text_module-ban\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>11:<sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;nem<sp/>jo<sp/>forma<sp/>text_module-ban\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>12:<sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;rossz<sp/>karakterek<sp/>a<sp/>text_module-ban\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unhandlered<sp/>error\n&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355" refid="nharamkor__vs_8cpp_1a8e7995ef24cddb91ed4b4d47a03deb4d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nharamkor__vs_8cpp_1a8e7995ef24cddb91ed4b4d47a03deb4d" kindref="member">print</ref>(<ref refid="classmodule__t" kindref="compound">module_t</ref>*&amp;<sp/><ref refid="classlista" kindref="compound">m_main</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">kezd</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">lezar</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">m_main</ref><sp/>==<sp/><ref refid="classlista" kindref="compound">NULL</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">in</ref><sp/>=<sp/><ref refid="classlista" kindref="compound">m_main</ref>-&gt;get_be_num();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">out</ref><sp/>=<sp/><ref refid="classlista" kindref="compound">m_main</ref>-&gt;get_ki_num();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">kezd</ref>)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(<ref refid="classlista" kindref="compound">char</ref>)218;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">i</ref>=0;<ref refid="classlista" kindref="compound">i</ref>&lt;<ref refid="classlista" kindref="compound">in</ref>;<ref refid="classlista" kindref="compound">i</ref>++)<ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)196;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(<ref refid="classlista" kindref="compound">char</ref>)194;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="classlista" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classlista" kindref="compound">out</ref>;<sp/><ref refid="classlista" kindref="compound">i</ref>++)<ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)196;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(<ref refid="classlista" kindref="compound">char</ref>)191<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)179;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">j</ref><sp/>=<sp/>0;<sp/><ref refid="classlista" kindref="compound">j</ref><sp/>&lt;<sp/><ref refid="classlista" kindref="compound">out</ref><sp/>+<sp/><ref refid="classlista" kindref="compound">in</ref>;<sp/><ref refid="classlista" kindref="compound">j</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">j</ref><sp/>==<sp/><ref refid="classlista" kindref="compound">in</ref>)<ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(<ref refid="classlista" kindref="compound">char</ref>)179;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(<ref refid="classlista" kindref="compound">char</ref>)(<ref refid="classlista" kindref="compound">j</ref><sp/>+<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(<ref refid="classlista" kindref="compound">char</ref>)179<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(<ref refid="classlista" kindref="compound">char</ref>)179;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">j</ref><sp/>=<sp/>0;<sp/><ref refid="classlista" kindref="compound">j</ref><sp/>&lt;<sp/><ref refid="classlista" kindref="compound">in</ref>;<sp/><ref refid="classlista" kindref="compound">j</ref>++)<ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<ref refid="classlista" kindref="compound">m_main</ref>-&gt;get_be_ertek(<ref refid="classlista" kindref="compound">j</ref>);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(<ref refid="classlista" kindref="compound">char</ref>)179;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">j</ref><sp/>=<sp/>0;<sp/><ref refid="classlista" kindref="compound">j</ref><sp/>&lt;<sp/><ref refid="classlista" kindref="compound">out</ref>;<sp/><ref refid="classlista" kindref="compound">j</ref>++)<ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<ref refid="classlista" kindref="compound">m_main</ref>-&gt;get_ki_ertek(<ref refid="classlista" kindref="compound">j</ref>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(<ref refid="classlista" kindref="compound">char</ref>)179<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">lezar</ref>)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(<ref refid="classlista" kindref="compound">char</ref>)192;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="classlista" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classlista" kindref="compound">in</ref>;<sp/><ref refid="classlista" kindref="compound">i</ref>++)<ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)196;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(<ref refid="classlista" kindref="compound">char</ref>)193;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="classlista" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classlista" kindref="compound">out</ref>;<sp/><ref refid="classlista" kindref="compound">i</ref>++)<ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)196;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/>(<ref refid="classlista" kindref="compound">char</ref>)217<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nharamkor__vs_8cpp_1ab44d8e6ed4c39cb1c0cf792429db848e" kindref="member">input_handler</ref>(<ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::istream</ref>&amp;<sp/><ref refid="classlista" kindref="compound">in</ref>,<sp/><ref refid="classlista" kindref="compound">lista&lt;module_t*&gt;</ref>&amp;<sp/><ref refid="classlista" kindref="compound">wait_to_do_modules</ref>,<sp/><ref refid="classlista" kindref="compound">uint8_t</ref>&amp;<sp/><ref refid="classlista" kindref="compound">mods</ref>,<sp/><ref refid="classlista" kindref="compound">lista&lt;prot_module_t*&gt;</ref>&amp;<sp/><ref refid="classlista" kindref="compound">modulok</ref>,<sp/><ref refid="classmodule__t" kindref="compound">module_t</ref>*&amp;<sp/><ref refid="classlista" kindref="compound">m_main</ref>,<sp/><ref refid="classlista" kindref="compound">lista&lt;char*&gt;</ref>&amp;<sp/><ref refid="classlista" kindref="compound">insts</ref>);</highlight></codeline>
<codeline lineno="393" refid="nharamkor__vs_8cpp_1a28f543ce27108ae4de42d9991865237e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nharamkor__vs_8cpp_1a28f543ce27108ae4de42d9991865237e" kindref="member">input_handler_module</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classlista" kindref="compound">s</ref>,<sp/><ref refid="classlista" kindref="compound">lista&lt;prot_module_t*&gt;</ref>&amp;<sp/><ref refid="classlista" kindref="compound">modulok</ref>,<sp/><ref refid="classmodule__t" kindref="compound">module_t</ref>*&amp;<sp/><ref refid="classlista" kindref="compound">m_main</ref>)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="nharamkor__vs_8cpp_1a3e0f7cbe319cdfbb528b924d817885fd" kindref="member">print_module_error</ref>(<ref refid="nharamkor__vs_8cpp_1a079960085332785c1fb971533a9912a9" kindref="member">test_module</ref>(<ref refid="classlista" kindref="compound">s</ref>,<sp/><ref refid="classlista" kindref="compound">modulok</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">strcmp</ref>(<ref refid="classlista" kindref="compound">modulok</ref>[<ref refid="classlista" kindref="compound">modulok</ref>.<ref refid="classlista_1a5baaf78ac201a75e49f18110daed7fd6" kindref="member">length</ref>()<sp/>-<sp/>1]-&gt;getnev(),<sp/></highlight><highlight class="stringliteral">&quot;_main&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;main<sp/>setted\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">m_main</ref><sp/>=<sp/><ref refid="classlista" kindref="compound">modulok</ref>[<ref refid="classlista" kindref="compound">modulok</ref>.<ref refid="classlista_1a5baaf78ac201a75e49f18110daed7fd6" kindref="member">length</ref>()<sp/>-<sp/>1]-&gt;getprot()-&gt;copy();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412" refid="nharamkor__vs_8cpp_1ab7c916fb6815401293901bf9e02feb5d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nharamkor__vs_8cpp_1ab7c916fb6815401293901bf9e02feb5d" kindref="member">input_handler_read</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classlista" kindref="compound">s</ref>,<sp/><ref refid="classlista" kindref="compound">lista&lt;module_t*&gt;</ref>&amp;<sp/><ref refid="classlista" kindref="compound">wait_to_do_wires</ref>,<sp/><ref refid="classlista" kindref="compound">uint8_t</ref>&amp;<sp/><ref refid="classlista" kindref="compound">mods</ref>,<sp/><ref refid="classlista" kindref="compound">lista&lt;prot_module_t*&gt;</ref>&amp;<sp/><ref refid="classlista" kindref="compound">modulok</ref>,<sp/><ref refid="classmodule__t" kindref="compound">module_t</ref>*&amp;<sp/><ref refid="classlista" kindref="compound">m_main</ref>,<sp/><ref refid="classlista" kindref="compound">lista&lt;char*&gt;</ref>&amp;<sp/><ref refid="classlista" kindref="compound">insts</ref>)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::ifstream</ref><sp/><ref refid="classlista" kindref="compound">inf</ref>(&amp;(<ref refid="classlista" kindref="compound">s</ref>[1]));</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">inf</ref>.fail())<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">inf</ref>.clear();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;sikeres<sp/>megnyitas\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="classlista" kindref="compound">inf</ref>.eof())<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nharamkor__vs_8cpp_1ab44d8e6ed4c39cb1c0cf792429db848e" kindref="member">input_handler</ref>(<ref refid="classlista" kindref="compound">inf</ref>,<sp/><ref refid="classlista" kindref="compound">wait_to_do_wires</ref>,<sp/><ref refid="classlista" kindref="compound">mods</ref>,<sp/><ref refid="classlista" kindref="compound">modulok</ref>,<sp/><ref refid="classlista" kindref="compound">m_main</ref>,<sp/><ref refid="classlista" kindref="compound">insts</ref>);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">inf</ref>.close();</highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429" refid="nharamkor__vs_8cpp_1aedc7074de3b40368806c1c432f215d92" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nharamkor__vs_8cpp_1aedc7074de3b40368806c1c432f215d92" kindref="member">input_handler_write</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classlista" kindref="compound">s</ref>,<sp/><ref refid="classlista" kindref="compound">lista&lt;char*&gt;</ref>&amp;<sp/><ref refid="classlista" kindref="compound">insts</ref>)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::ofstream</ref><sp/><ref refid="classlista" kindref="compound">outf</ref>(&amp;(<ref refid="classlista" kindref="compound">s</ref>[1]));</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">outf</ref>.fail())<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">outf</ref>.clear();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;sikeres<sp/>megnyitas\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="classlista" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classlista" kindref="compound">insts</ref>.<ref refid="classlista_1a5baaf78ac201a75e49f18110daed7fd6" kindref="member">length</ref>();<sp/><ref refid="classlista" kindref="compound">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">insts</ref>[<ref refid="classlista" kindref="compound">i</ref>][0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref><sp/>&lt;&lt;<sp/><ref refid="classlista" kindref="compound">insts</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nI/N:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">c</ref>;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cin</ref><sp/>&gt;&gt;<sp/><ref refid="classlista" kindref="compound">c</ref>;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">c</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">outf</ref><sp/>&lt;&lt;<sp/><ref refid="classlista" kindref="compound">insts</ref>[<ref refid="classlista" kindref="compound">i</ref>]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">outf</ref>.close();</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457" refid="nharamkor__vs_8cpp_1af09a2309c4133585955f671c2be21293" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="nharamkor__vs_8cpp_1af09a2309c4133585955f671c2be21293" kindref="member">input_handler_do</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classlista" kindref="compound">s</ref>,<sp/><ref refid="classlista" kindref="compound">lista&lt;module_t*&gt;</ref>&amp;<sp/><ref refid="classlista" kindref="compound">wait_to_do_modules</ref>,<sp/><ref refid="classlista" kindref="compound">uint8_t</ref>&amp;<sp/><ref refid="classlista" kindref="compound">mods</ref>,<sp/><ref refid="classmodule__t" kindref="compound">module_t</ref>*&amp;<sp/><ref refid="classlista" kindref="compound">m_main</ref>)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">number</ref>;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">addmain</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="nharamkor__vs_8cpp_1a989b6e5b3b8815b8088e8f8ba6d7752c" kindref="member">instruct_handler</ref>(<ref refid="classlista" kindref="compound">s</ref>,<sp/><ref refid="classlista" kindref="compound">m_main</ref>,<sp/><ref refid="classlista" kindref="compound">mods</ref>,<sp/><ref refid="classlista" kindref="compound">number</ref>,<sp/><ref refid="classlista" kindref="compound">wait_to_do_modules</ref>))</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="classlista" kindref="compound">mods</ref><sp/>&amp;<sp/>0b00000010)<sp/>==<sp/>0b00000010)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">mods</ref><sp/>&amp;=<sp/>0b11111101;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//console<sp/>clear</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="classlista" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classlista" kindref="compound">number</ref>;<sp/><ref refid="classlista" kindref="compound">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">lista&lt;module_t*&gt;</ref><sp/><ref refid="classlista" kindref="compound">wait_to_do_modules2</ref>;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">wait_to_do_modules</ref>.<ref refid="classlista_1a5baaf78ac201a75e49f18110daed7fd6" kindref="member">length</ref>()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">wait_to_do_modules</ref>[0]-&gt;vegrehajtas(<ref refid="classlista" kindref="compound">wait_to_do_modules2</ref>);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">wait_to_do_modules</ref>.<ref refid="classlista_1a91e03590c673ff5b3b928acc9dc6275d" kindref="member">rem</ref>(0);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">wait_to_do_modules</ref>.<ref refid="classlista_1a3f48539cd27ef435ea20315183a7c48e" kindref="member">add</ref>(<ref refid="classlista" kindref="compound">wait_to_do_modules2</ref>);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="classlista" kindref="compound">mods</ref><sp/>&amp;<sp/>0b00000001)<sp/>==<sp/>0b00000001)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nharamkor__vs_8cpp_1a8e7995ef24cddb91ed4b4d47a03deb4d" kindref="member">print</ref>(<ref refid="classlista" kindref="compound">m_main</ref>,<sp/><ref refid="classlista" kindref="compound">i</ref><sp/>==<sp/>0,<sp/><ref refid="classlista" kindref="compound">i</ref><sp/>==<sp/><ref refid="classlista" kindref="compound">number</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="classlista" kindref="compound">mods</ref><sp/>&amp;<sp/>0b00000001)<sp/>!=<sp/>0b00000001<sp/>&amp;&amp;<sp/><ref refid="classlista" kindref="compound">number</ref><sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nharamkor__vs_8cpp_1a8e7995ef24cddb91ed4b4d47a03deb4d" kindref="member">print</ref>(<ref refid="classlista" kindref="compound">m_main</ref>);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="nharamkor__vs_8cpp_1ab44d8e6ed4c39cb1c0cf792429db848e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="nharamkor__vs_8cpp_1ab44d8e6ed4c39cb1c0cf792429db848e" kindref="member">input_handler</ref>(<ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::istream</ref>&amp;<sp/><ref refid="classlista" kindref="compound">in</ref>,<sp/><ref refid="classlista" kindref="compound">lista&lt;module_t*&gt;</ref>&amp;<sp/><ref refid="classlista" kindref="compound">wait_to_do_modules</ref>,<sp/><ref refid="classlista" kindref="compound">uint8_t</ref>&amp;<sp/><ref refid="classlista" kindref="compound">mods</ref>,<sp/><ref refid="classlista" kindref="compound">lista&lt;prot_module_t*&gt;</ref>&amp;<sp/><ref refid="classlista" kindref="compound">modulok</ref>,<sp/><ref refid="classmodule__t" kindref="compound">module_t</ref>*&amp;<sp/><ref refid="classlista" kindref="compound">m_main</ref>,<sp/><ref refid="classlista" kindref="compound">lista&lt;char*&gt;</ref>&amp;<sp/><ref refid="classlista" kindref="compound">insts</ref>)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="classlista" kindref="compound">mods</ref><sp/>&amp;<sp/>0b10000000)<sp/>==<sp/>0b10000000)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classlista" kindref="compound">s</ref><sp/>=<sp/><ref refid="nharamkor__vs_8cpp_1abe6c24302d4150af8e6211ec3a45ad0d" kindref="member">getstring</ref>(<ref refid="classlista" kindref="compound">in</ref>);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">s</ref>[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">){</highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="classlista" kindref="compound">s</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">insts</ref>.<ref refid="classlista_1a3f48539cd27ef435ea20315183a7c48e" kindref="member">add</ref>(<ref refid="classlista" kindref="compound">s</ref>);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">s</ref>[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">)<sp/>{</highlight><highlight class="comment">//új<sp/>module</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nharamkor__vs_8cpp_1a28f543ce27108ae4de42d9991865237e" kindref="member">input_handler_module</ref>(<ref refid="classlista" kindref="compound">s</ref>,<sp/><ref refid="classlista" kindref="compound">modulok</ref>,<sp/><ref refid="classlista" kindref="compound">m_main</ref>);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">s</ref>[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">)<sp/>{</highlight><highlight class="comment">//fájlból<sp/>olvasás</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nharamkor__vs_8cpp_1ab7c916fb6815401293901bf9e02feb5d" kindref="member">input_handler_read</ref>(<ref refid="classlista" kindref="compound">s</ref>,<sp/><ref refid="classlista" kindref="compound">wait_to_do_modules</ref>,<sp/><ref refid="classlista" kindref="compound">mods</ref>,<sp/><ref refid="classlista" kindref="compound">modulok</ref>,<sp/><ref refid="classlista" kindref="compound">m_main</ref>,<sp/><ref refid="classlista" kindref="compound">insts</ref>);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classlista" kindref="compound">s</ref>[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">)<sp/>{</highlight><highlight class="comment">//fájlba<sp/>írás</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nharamkor__vs_8cpp_1aedc7074de3b40368806c1c432f215d92" kindref="member">input_handler_write</ref>(<ref refid="classlista" kindref="compound">s</ref>,<sp/><ref refid="classlista" kindref="compound">insts</ref>);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight><highlight class="comment">//végrehajtás</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="nharamkor__vs_8cpp_1af09a2309c4133585955f671c2be21293" kindref="member">input_handler_do</ref>(<ref refid="classlista" kindref="compound">s</ref>,<sp/><ref refid="classlista" kindref="compound">wait_to_do_modules</ref>,<sp/><ref refid="classlista" kindref="compound">mods</ref>,<sp/><ref refid="classlista" kindref="compound">m_main</ref>))<ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cout</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;rossz<sp/>vegrehajtas<sp/>utasitas\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="514" refid="nharamkor__vs_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="nharamkor__vs_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()</highlight></codeline>
<codeline lineno="515"><highlight class="normal">{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">lista&lt;prot_module_t*&gt;</ref><sp/><ref refid="classlista" kindref="compound">modulok</ref>;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmodule__t" kindref="compound">module_t</ref>*<sp/><ref refid="classlista" kindref="compound">m_main</ref><sp/>=<sp/><ref refid="classlista" kindref="compound">NULL</ref>;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">lista&lt;module_t*&gt;</ref><sp/><ref refid="classlista" kindref="compound">wait_to_do_modules</ref>;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">lista&lt;char*&gt;</ref><sp/><ref refid="classlista" kindref="compound">insts</ref>;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">uint8_t</ref><sp/><ref refid="classlista" kindref="compound">mode</ref>=0;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!((<ref refid="classlista" kindref="compound">mode</ref>&amp;0b10000000)<sp/>==<sp/>0b10000000))<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="nharamkor__vs_8cpp_1ab44d8e6ed4c39cb1c0cf792429db848e" kindref="member">input_handler</ref>(<ref refid="classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a" kindref="member">std::cin</ref>,<sp/><ref refid="classlista" kindref="compound">wait_to_do_modules</ref>,<sp/><ref refid="classlista" kindref="compound">mode</ref>,<sp/><ref refid="classlista" kindref="compound">modulok</ref>,<sp/><ref refid="classlista" kindref="compound">m_main</ref>,<sp/><ref refid="classlista" kindref="compound">insts</ref>);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">wait_to_do_modules</ref>.<ref refid="classlista_1a12a87ad57faeebe390e6514514dd85a7" kindref="member">din</ref>();</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">modulok</ref>.<ref refid="classlista_1a12a87ad57faeebe390e6514514dd85a7" kindref="member">din</ref>();</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlista" kindref="compound">insts</ref>.<ref refid="classlista_1a10bc0895ed694524a7031254718607ed" kindref="member">dinl</ref>();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classlista" kindref="compound">m_main</ref>;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment">//TODO<sp/>ez<sp/>a<sp/>file</highlight></codeline>
    </programlisting>
    <location file="nharamkor_vs.cpp"/>
  </compounddef>
</doxygen>
