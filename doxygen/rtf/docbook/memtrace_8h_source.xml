<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_memtrace_8h_source" xml:lang="en-US">
<title>memtrace.h</title>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">/*********************************</emphasis>
2 <emphasis role="comment">Memoriaszivargas-detektor</emphasis>
3 <emphasis role="comment">Keszitette:&#32;Peregi&#32;Tamas,&#32;BME&#32;IIT,&#32;2011</emphasis>
4 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;petamas@iit.bme.hu</emphasis>
5 <emphasis role="comment">Kanari:&#32;&#32;&#32;&#32;&#32;Szeberenyi&#32;Imre,&#32;2013.,</emphasis>
6 <emphasis role="comment">VS&#32;2012:&#32;&#32;&#32;&#32;Szeberényi&#32;Imre,&#32;2015.,</emphasis>
7 <emphasis role="comment">mem_dump:&#32;&#32;&#32;2016.</emphasis>
8 <emphasis role="comment">inclue-ok:&#32;&#32;2017.,&#32;2018.&#32;2019.</emphasis>
9 <emphasis role="comment">*********************************/</emphasis>
10 
11 <emphasis role="preprocessor">#ifndef&#32;MEMTRACE_H</emphasis>
12 <emphasis role="preprocessor">#define&#32;MEMTRACE_H</emphasis>
13 
14 <emphasis role="preprocessor">#if&#32;defined(MEMTRACE)</emphasis>
15 
16 <emphasis role="comment">/*ha&#32;definiálva&#32;van,&#32;akkor&#32;a&#32;hibakat&#32;ebbe&#32;a&#32;fajlba&#32;írja,&#32;egyébkent&#32;stderr-re*/</emphasis>
17 <emphasis role="comment">/*#define&#32;MEMTRACE_ERRFILE&#32;MEMTRACE.ERR*/</emphasis>
18 
19 <emphasis role="comment">/*ha&#32;definialva&#32;van,&#32;akkor&#32;futas&#32;kozben&#32;lancolt&#32;listat&#32;epit.&#32;Javasolt&#32;a&#32;hasznalata*/</emphasis>
20 <emphasis role="preprocessor">#define&#32;MEMTRACE_TO_MEMORY</emphasis>
21 
22 <emphasis role="comment">/*ha&#32;definialva&#32;van,&#32;akkor&#32;futas&#32;kozben&#32;fajlba&#32;irja&#32;a&#32;foglalasokat*/</emphasis>
23 <emphasis role="comment">/*ekkor&#32;nincs&#32;ellenorzes,&#32;csak&#32;naplozas*/</emphasis>
24 <emphasis role="comment">/*#define&#32;MEMTRACE_TO_FILE*/</emphasis>
25 
26 <emphasis role="comment">/*ha&#32;definialva&#32;van,&#32;akkor&#32;a&#32;megallaskor&#32;automatikus&#32;riport&#32;keszul&#32;*/</emphasis>
27 <emphasis role="preprocessor">#define&#32;MEMTRACE_AUTO</emphasis>
28 
29 <emphasis role="comment">/*ha&#32;definialva&#32;van,&#32;akkor&#32;malloc()/calloc()/realloc()/free()&#32;kovetve&#32;lesz*/</emphasis>
30 <emphasis role="preprocessor">#define&#32;MEMTRACE_C</emphasis>
31 
32 <emphasis role="preprocessor">#ifdef&#32;MEMTRACE_C</emphasis>
33 &#32;&#32;&#32;&#32;<emphasis role="comment">/*ha&#32;definialva&#32;van,&#32;akkor&#32;free(NULL)&#32;nem&#32;okoz&#32;hibat*/</emphasis>
34 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;ALLOW_FREE_NULL</emphasis>
35 <emphasis role="preprocessor">#endif</emphasis>
36 
37 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
38 &#32;&#32;&#32;&#32;<emphasis role="comment">/*ha&#32;definialva&#32;van,&#32;akkor&#32;new/delete/new[]/delete[]&#32;kovetve&#32;lesz*/</emphasis>
39 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;MEMTRACE_CPP</emphasis>
40 <emphasis role="preprocessor">#endif</emphasis>
41 
42 <emphasis role="preprocessor">#if&#32;defined(__cplusplus)&#32;&amp;&amp;&#32;defined(MEMTRACE_TO_MEMORY)</emphasis>
43 &#32;&#32;&#32;&#32;<emphasis role="comment">/*ha&#32;definialva&#32;van,&#32;akkor&#32;atexit&#32;helyett&#32;objektumot&#32;hasznal*/</emphasis>
44 &#32;&#32;&#32;&#32;<emphasis role="comment">/*ajanlott&#32;bekapcsolni*/</emphasis>
45 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;USE_ATEXIT_OBJECT</emphasis>
46 <emphasis role="preprocessor">#endif</emphasis>
47 
48 <emphasis role="comment">/******************************************/</emphasis>
49 <emphasis role="comment">/*&#32;INNEN&#32;NE&#32;MODOSITSD&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
50 <emphasis role="comment">/******************************************/</emphasis>
51 <emphasis role="preprocessor">#ifdef&#32;NO_MEMTRACE_TO_FILE</emphasis>
52 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;MEMTRACE_TO_FILE</emphasis>
53 <emphasis role="preprocessor">#endif</emphasis>
54 
55 <emphasis role="preprocessor">#ifdef&#32;NO_MEMTRACE_TO_MEMORY</emphasis>
56 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;MEMTRACE_TO_MEMORY</emphasis>
57 <emphasis role="preprocessor">#endif</emphasis>
58 
59 <emphasis role="preprocessor">#ifndef&#32;MEMTRACE_AUTO</emphasis>
60 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;USE_ATEXIT_OBJECT</emphasis>
61 <emphasis role="preprocessor">#endif</emphasis>
62 
63 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
64 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;START_NAMESPACE&#32;namespace&#32;memtrace&#32;{</emphasis>
65 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;END_NAMESPACE&#32;}&#32;</emphasis><emphasis role="comment">/*namespace*/</emphasis><emphasis role="preprocessor"></emphasis>
66 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TRACEC(func)&#32;memtrace::func</emphasis>
67 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;new&gt;</emphasis>
68 <emphasis role="preprocessor">#else</emphasis>
69 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;START_NAMESPACE</emphasis>
70 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;END_NAMESPACE</emphasis>
71 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;TRACEC(func)&#32;func</emphasis>
72 <emphasis role="preprocessor">#endif</emphasis>
73 
74 <emphasis role="comment">//&#32;THROW&#32;deklaráció&#32;változatai</emphasis>
75 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)</emphasis>
76 &#32;&#32;<emphasis role="comment">//&#32;VS&#32;rosszul&#32;kezeli&#32;az&#32;__cplusplus&#32;makrot</emphasis>
77 <emphasis role="preprocessor">&#32;&#32;#if&#32;_MSC_VER&#32;&lt;&#32;1900</emphasis>
78 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;*&#32;nem&#32;biztos,&#32;hogy&#32;jó&#32;így&#32;*</emphasis>
79 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;THROW_BADALLOC</emphasis>
80 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;THROW_NOTHING</emphasis>
81 <emphasis role="preprocessor">&#32;&#32;#else</emphasis>
82 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;C++11&#32;vagy&#32;újabb</emphasis>
83 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;THROW_BADALLOC&#32;noexcept(false)</emphasis>
84 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;THROW_NOTHING&#32;noexcept</emphasis>
85 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
86 <emphasis role="preprocessor">#else</emphasis>
87 <emphasis role="preprocessor">&#32;&#32;#if&#32;__cplusplus&#32;&lt;&#32;201103L</emphasis>
88 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;C++2003&#32;vagy&#32;régebbi</emphasis>
89 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;THROW_BADALLOC&#32;throw&#32;(std::bad_alloc)</emphasis>
90 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;THROW_NOTHING&#32;throw&#32;()</emphasis>
91 <emphasis role="preprocessor">&#32;&#32;#else</emphasis>
92 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;C++11&#32;vagy&#32;újabb</emphasis>
93 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;THROW_BADALLOC&#32;noexcept(false)</emphasis>
94 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;THROW_NOTHING&#32;noexcept</emphasis>
95 <emphasis role="preprocessor">&#32;&#32;#endif</emphasis>
96 <emphasis role="preprocessor">#endif</emphasis>
97 
98 <link linkend="_classlista">START_NAMESPACE</link>
99 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classlista">allocated_blocks</link>();
100 <link linkend="_classlista">END_NAMESPACE</link>
101 
102 <emphasis role="preprocessor">#if&#32;defined(MEMTRACE_TO_MEMORY)</emphasis>
103 <link linkend="_classlista">START_NAMESPACE</link>
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classlista">mem_check</link>(<emphasis role="keywordtype">void</emphasis>);
105 <link linkend="_classlista">END_NAMESPACE</link>
106 <emphasis role="preprocessor">#endif</emphasis>
107 
108 <emphasis role="preprocessor">#if&#32;defined(MEMTRACE_TO_MEMORY)&#32;&amp;&amp;&#32;defined(USE_ATEXIT_OBJECT)</emphasis>
109 <emphasis role="preprocessor">#include&#32;&lt;cstdio&gt;</emphasis>
110 <link linkend="_classlista">START_NAMESPACE</link>
111 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classlista">atexit_class</link>&#32;{
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a">counter</link>;
114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a">err</link>;
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a">atexit_class</link>()&#32;{
117 <emphasis role="preprocessor">#if&#32;defined(CPORTA)&#32;&amp;&amp;&#32;!defined(CPORTA_NOSETBUF)</emphasis>
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classlista">counter</link>&#32;==&#32;0)&#32;{
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a">setbuf</link>(<link linkend="_classlista">stdout</link>,&#32;0);
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a">setbuf</link>(<link linkend="_classlista">stderr</link>,&#32;0);
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
122 <emphasis role="preprocessor">#endif</emphasis>
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classlista">counter</link>++;
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
125 
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a">check</link>()&#32;{
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(--<link linkend="_classlista">counter</link>&#32;==&#32;0)
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classlista">err</link>&#32;=&#32;<link linkend="_classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a">mem_check</link>();
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a">err</link>;
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
131 
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a">~atexit_class</link>()&#32;{
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a">check</link>();
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
135 &#32;&#32;&#32;&#32;};
136 
137 <emphasis role="keyword">static</emphasis>&#32;<link linkend="_classlista">atexit_class</link>&#32;<link linkend="_classlista">atexit_obj</link>;
138 
139 <link linkend="_classlista">END_NAMESPACE</link>
140 <emphasis role="preprocessor">#endif</emphasis><emphasis role="comment">/*MEMTRACE_TO_MEMORY&#32;&amp;&amp;&#32;USE_ATEXIT_OBJECT*/</emphasis><emphasis role="preprocessor"></emphasis>
141 
142 <emphasis role="comment">/*Innentol&#32;csak&#32;a&#32;&quot;normal&quot;&#32;include&#32;eseten&#32;kell,&#32;kulonben&#32;osszezavarja&#32;a&#32;mukodest*/</emphasis>
143 <emphasis role="preprocessor">#ifndef&#32;FROM_MEMTRACE_CPP</emphasis>
144 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
145 <emphasis role="preprocessor">#ifdef&#32;__cplusplus</emphasis>
146 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;iostream&gt;</emphasis>
147 <emphasis role="comment">/*&#32;ide&#32;gyűjtjük&#32;a&#32;nemtrace-vel&#32;összeakadó&#32;headereket,&#32;hogy&#32;előbb&#32;legyenek&#32;*/</emphasis>
148 
149 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;fstream&gt;</emphasis>&#32;&#32;<emphasis role="comment">//&#32;VS&#32;2013&#32;headerjében&#32;van&#32;deleted&#32;definició</emphasis>
150 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;sstream&gt;</emphasis>
151 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;vector&gt;</emphasis>
152 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;list&gt;</emphasis>
153 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;map&gt;</emphasis>
154 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;algorithm&gt;</emphasis>
155 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;functional&gt;</emphasis>
156 <emphasis role="preprocessor">#endif</emphasis>
157 <emphasis role="preprocessor">#ifdef&#32;MEMTRACE_CPP</emphasis>
158 &#32;&#32;&#32;&#32;<emphasis role="keyword">namespace&#32;</emphasis><link linkend="_classlista">std</link>&#32;{
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a">void</link>&#32;(*<link linkend="_classlista">new_handler</link>)();
160 }
161 <emphasis role="preprocessor">#endif</emphasis>
162 
163 <emphasis role="preprocessor">#ifdef&#32;MEMTRACE_C</emphasis>
164 <link linkend="_classlista">START_NAMESPACE</link>
165 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;malloc</emphasis>
166 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;malloc(size)&#32;TRACEC(traced_malloc)(size,#size,__LINE__,__FILE__)</emphasis>
167 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*&#32;<link linkend="_classlista">traced_malloc</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classlista">size</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_classlista">size_txt</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classlista">line</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;<link linkend="_classlista">file</link>);
168 
169 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;calloc</emphasis>
170 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;calloc(count,size)&#32;TRACEC(traced_calloc)(count,&#32;size,&#32;#count&quot;,&quot;#size,__LINE__,__FILE__)</emphasis>
171 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*&#32;<link linkend="_classlista">traced_calloc</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classlista">count</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classlista">size</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_classlista">size_txt</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classlista">line</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;<link linkend="_classlista">file</link>);
172 
173 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;free</emphasis>
174 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;free(p)&#32;TRACEC(traced_free)(p,&#32;#p,__LINE__,__FILE__)</emphasis>
175 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classlista">traced_free</link>(<emphasis role="keywordtype">void</emphasis>&#32;*&#32;<link linkend="_classlista">p</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_classlista">size_txt</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classlista">line</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;<link linkend="_classlista">file</link>);
176 
177 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;realloc</emphasis>
178 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;realloc(old,size)&#32;TRACEC(traced_realloc)(old,size,#size,__LINE__,__FILE__)</emphasis>
179 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*&#32;<link linkend="_classlista">traced_realloc</link>(<emphasis role="keywordtype">void</emphasis>&#32;*&#32;<link linkend="_classlista">old</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classlista">size</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*<link linkend="_classlista">size_txt</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classlista">line</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;<link linkend="_classlista">file</link>);
180 
181 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classlista">mem_dump</link>(<emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*<link linkend="_classlista">mem</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classlista">size</link>,&#32;<link linkend="_classlista">FILE</link>*&#32;<link linkend="_classlista">fp</link>);
182 
183 
184 <link linkend="_classlista">END_NAMESPACE</link>
185 <emphasis role="preprocessor">#endif</emphasis><emphasis role="comment">/*MEMTRACE_C*/</emphasis><emphasis role="preprocessor"></emphasis>
186 
187 <emphasis role="preprocessor">#ifdef&#32;MEMTRACE_CPP</emphasis>
188 <link linkend="_classlista">START_NAMESPACE</link>
189 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;set_new_handler</emphasis>
190 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;set_new_handler(f)&#32;TRACEC(_set_new_handler)(f)</emphasis>
191 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classlista">_set_new_handler</link>(<link linkend="_classlista_1adfa22c0202d7ac7abfe006dbd3b5a12a">std::new_handler</link>&#32;<link linkend="_classlista">h</link>);
192 
193 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classlista">set_delete_call</link>(<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classlista">line</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;<link linkend="_classlista">file</link>);
194 <link linkend="_classlista">END_NAMESPACE</link>
195 
196 <emphasis role="keywordtype">void</emphasis>&#32;*&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">new</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classlista">size</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classlista">line</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;<link linkend="_classlista">file</link>)&#32;<link linkend="_classlista">THROW_BADALLOC</link>;
197 <emphasis role="keywordtype">void</emphasis>&#32;*&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">new</emphasis>[](<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classlista">size</link>,&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classlista">line</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;<link linkend="_classlista">file</link>)&#32;<link linkend="_classlista">THROW_BADALLOC</link>;
198 <emphasis role="keywordtype">void</emphasis>&#32;*&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">new</emphasis>(<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classlista">size</link>)&#32;<link linkend="_classlista">THROW_BADALLOC</link>;
199 <emphasis role="keywordtype">void</emphasis>&#32;*&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">new</emphasis>[](<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classlista">size</link>)&#32;<link linkend="_classlista">THROW_BADALLOC</link>;
200 <emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">delete</emphasis>(<emphasis role="keywordtype">void</emphasis>&#32;*&#32;<link linkend="_classlista">p</link>)&#32;&#32;<link linkend="_classlista">THROW_NOTHING</link>;
201 <emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">delete</emphasis>[](<emphasis role="keywordtype">void</emphasis>&#32;*&#32;<link linkend="_classlista">p</link>)&#32;<link linkend="_classlista">THROW_NOTHING</link>;
202 
203 <emphasis role="comment">/*&#32;Visual&#32;C++&#32;2012&#32;miatt&#32;kell,&#32;mert&#32;háklis,&#32;hogy&#32;nincs&#32;megfelelő&#32;delete,&#32;bár&#32;senki&#32;sem&#32;használja&#32;*/</emphasis>
204 <emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">delete</emphasis>(<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_classlista">p</link>,&#32;<link linkend="_classlista">int</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)&#32;<link linkend="_classlista">THROW_NOTHING</link>;
205 <emphasis role="keywordtype">void</emphasis>&#32;<emphasis role="keyword">operator</emphasis>&#32;<emphasis role="keyword">delete</emphasis>[](<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_classlista">p</link>,&#32;<link linkend="_classlista">int</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)&#32;<link linkend="_classlista">THROW_NOTHING</link>;
206 
207 
208 <emphasis role="preprocessor">#define&#32;new&#32;new(__LINE__,&#32;__FILE__)</emphasis>
209 <emphasis role="preprocessor">#define&#32;delete&#32;memtrace::set_delete_call(__LINE__,&#32;__FILE__),delete</emphasis>
210 
211 <emphasis role="preprocessor">#ifdef&#32;CPORTA</emphasis>
212 <emphasis role="preprocessor">#define&#32;system(...)&#32;&#32;</emphasis><emphasis role="comment">//&#32;system(__VA_ARGS__)</emphasis>
213 <emphasis role="preprocessor">#endif</emphasis>
214 
215 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*MEMTRACE_CPP*/</emphasis><emphasis role="preprocessor"></emphasis>
216 
217 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*FROM_MEMTRACE_CPP*/</emphasis><emphasis role="preprocessor"></emphasis>
218 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*MEMCHECK*/</emphasis><emphasis role="preprocessor"></emphasis>
219 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">/*MEMTRACE_H*/</emphasis><emphasis role="preprocessor"></emphasis>
</programlisting></section>
